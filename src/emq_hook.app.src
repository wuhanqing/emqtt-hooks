{application, emqttd,
  [
   {description, "Erlang MQTT Broker"},
   {vsn, "2.0"},
   {id, "emqttd"},
   {modules, []},
   {registered, []},
   {applications, [kernel, stdlib, gproc, esockd, mochiweb,
                   gen_logger, gen_conf]},
   {mod, {emqttd_app, []}},
   {env, [

          {ekaf,[
                 % required.
                 {ekaf_bootstrap_broker, {"localhost", 9092} },
                 % pass the {BrokerHost,Port} of atleast one permanent broker. Ideally should be
                 % the IP of a load balancer so that any broker can be contacted


                 % optional.
                 {ekaf_bootstrap_topics, [ <<"ekaf">> ]},
                 % will start workers for this topic when ekaf starts
                 % a lazy and more recommended approach is to ignore this config

                 % optional
                 {ekaf_per_partition_workers,100},
                 % how big is the connection pool per partition
                 % eg: if the topic has 3 partitions, then with this eg: 300 workers will be started


                 % optional
                 {ekaf_max_buffer_size, [{<<"ekaf">>,10000},                % for specific topic
                                         {ekaf_max_buffer_size,100}]},       % for other topics
                  % how many events should the worker wait for before flushing to kafka as a batch


                 % optional
                 {ekaf_partition_strategy, random},
                 % if you are not bothered about the order, use random for speed
                 % else the default is random

                 % optional
                 {ekaf_callback_flush, {mystats,callback_flush}},
                 % can be used for instrumentating how how batches are sent & hygeine

                 % optional
                 {ekaf_callback_custom_partition_picker, {ekaf_callbacks, 
                                                          default_custom_partition_picker}} 
                 % to always route messages with keys to the same partition

         ]}

         ]}
  ]}.
